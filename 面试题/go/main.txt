Golang 有那些特点 ?
: 简单易学,高效执行,并发性能好,自动垃圾回收

支持那些数据类型 ?
: 布尔型,数值型，字符串型，指针型，数组型，切片型,地图型，通道型

什么是Goroutione? 
: 是golang 中轻量级线程的实现方式,与传统线程相比，更加高效，轻量级


怎么创建Goroutine ? 
: go func(){ // 执行代码 }()

什么是通道 ?
: 通道是Golang中用于协程之间通信的基本结构,通道提供了一种
同步方式，以确保发送者和接受者都准备好进行交互

怎么创建一个通道 ？
： ch := make(chan int)

什么是数组 (Array) ?
: 数组是Golang中一种数据结构,他可以容纳多个相同类型的变量.
数组的数组元素数量在创建时被指定，并且无法修改

怎么创建一个数组 ?
: var arr [5]int

什么是切片 ?
:切片是golang中用于动态储存和管理数据的一种数据结构，切片的长度和容量可以
动态的改变

怎么创建一个切片 ?
s := make([]int,5)

什么是映射 (Map) ?
:一种键值对数据结构

怎么创建一个Map ?
: m:=make(map[string]int)

什么是结构体 ?
: 是一种自定义类型

怎么创建一个结构体 ?
: type Person struct {
    name string
    age int
}

什么是接口 ?
: 一种数据结构,定义了一组方法的签名

怎么创建接口 ?
: type MyInterface interface(
    Method() int
    Method2(str string) string
)

什么是指针 ?
: 一种特殊的变量类型,存储一个内存地址

怎么创建一个指针 ?
var ptr *int

怎么获取变量的地址?
: num := 10 
  var p *int = &num

什么是 defer 语句 ?
: defer 语句用于在函数返回之前执行某个操作，通常用于释放资源，关闭文件等

什么是反射 ?
: 反射式golang中的一项功能，它运行程序在运行时检测自身的状态和结构

怎么使用反射 ?
: var myVar interface {} = "Hello"
fmt.Println(reflrct.TypeOf(myVar))

什么是并发 ?
： 允许程序同时执行多个任务

如何在 Golang中实现并发 ?
: go func() { ch <- 1 }()

什么是锁 (Lock) ?
: 锁是Golang中用于保护共享资源的一种机制，锁允许只有一个协程访问共享资源,从而避免竞争条件

如何使用锁 ?
: var mu sync.Mutex mu.Lock()

什么是Http客户端 ？
: http客户端是Golang中发生http请求的一种机制，
它可以与Web服务器进行通信，并使用GET,POST方法发送请求

怎么创建 HTTp 客户端 ?
client := http.Client{} resp,err := client.Get(url)

什么是Http 服务器 ?
: 接受和处理Http请求的一种机制，它可以与客户端进行通信，并更具请求提供响应

什么是JSON ? 
: JSON 是一种轻量级数据交换格式,使用文本来表示结构化数据，并且易于解析和生成

怎么在Golang中连接数据库 ?
: db,err := sql.Open("mysql","user:password@tcp(localhost:3306/mydb)")

什么是orm ?
: orm 是一种将关系数据库和面向对象中的类或对象关联起来的技术，可以使用简单的代码来操作数据库

什么是协程池 ? 
: 协程池是一种管理协程的机制，可以有效避免创建过多的协程，从而提高程序的性能

如何使用协程池 ?
: P,_ := ants.NewPool(10) defer p.Release()

怎么计算代码覆盖率 ?
: 使用 go test -cover

什么是反向代理 ?
: 反向代理是一种网络服务,它接收客户端请求并将其发到另一个服务器上进行处理

怎么实现反向代理 ?
: 使用 net/http/httputol 包中的ReverseProxy类来实现反向代理

什么是内存泄露 ?
: 应用程序无法释放已经分配的内存，从而导致程序的崩溃或变慢

怎么避免内存泄露 ?
: 使用 defer 和垃圾回收机制来避免内存泄露



Go 的 GPM 模型

1. G (Goroutine)
轻量级协程，初始栈仅2KB,由 go 关键字创建
2. M (Machine)
对应操作系统线程，负责执行CPU指令,M 必须绑定一个P才能运行 G,默认上限是 10000,
个,可通过debug.setMaxThreads调整
3.P (Processor)
虚拟处理器,管理本地的G队列和调度上下文

调度策略与优化 :
Work-Staling (工作窃取) : 当 P 的本地队列为空时，会从全局队列或其他P窃取G,避免资源闲置
HandOff 机制: 如果协程阻塞,M会释放 P,由其他M接管，减少线程阻塞对整体性能的影响

Golang中的设计模式
: 单例模式 通过sync.Once 确保全局唯一实例
适用于配置管理，日志等场景

2.工厂模式

Go 的垃圾回收机制 
: 采用三色标记清除算法


